import type { Principal } from '@dfinity/agent';
export type AccountIdentifier = string;
export type AccountIdentifier__3 = string;
export interface AllowanceRequest {
  'token' : TokenIdentifier__5,
  'owner' : User__3,
  'spender' : Principal,
};
export interface ApproveRequest {
  'token' : TokenIdentifier__5,
  'subaccount' : [] | [SubAccount],
  'allowance' : Balance,
  'spender' : Principal,
};
export type Balance = bigint;
export interface BalanceRequest {
  'token' : TokenIdentifier__5,
  'user' : User__3,
};
export type BalanceResponse = { 'ok' : Balance } |
  { 'err' : CommonError__1 };
export type Balance__1 = bigint;
export type CommonError = { 'InvalidToken' : TokenIdentifier__5 } |
  { 'Other' : string };
export type CommonError__1 = { 'InvalidToken' : TokenIdentifier__5 } |
  { 'Other' : string };
export type Extension = string;
export type HeaderField = [string, string];
export interface HttpRequest {
  'url' : string,
  'method' : string,
  'body' : Array<number>,
  'headers' : Array<HeaderField>,
};
export interface HttpResponse {
  'body' : Array<number>,
  'headers' : Array<HeaderField>,
  'status_code' : number,
};
export interface Listing__1 {
  'locked' : [] | [Time__1],
  'seller' : Principal,
  'price' : bigint,
};
export type Memo = Array<number>;
export type Metadata = {
    'fungible' : {
      'decimals' : number,
      'metadata' : [] | [Array<number>],
      'name' : string,
      'symbol' : string,
    }
  } |
  { 'nonfungible' : { 'metadata' : [] | [Array<number>] } };
export interface MetadataStorageInfo { 'url' : string, 'thumb' : string };
export type MetadataStorageType = { 'S3' : null } |
  { 'Last' : null } |
  { 'Fleek' : null } |
  { 'MetaBox' : null };
export interface MintRequest {
  'to' : User__3,
  'metadata' : [] | [Array<number>],
};
export interface Property { 'trait_type' : string, 'value' : string };
export type Result_10 = { 'ok' : Balance__1 } |
  { 'err' : CommonError };
export type Result_11 = { 'ok' : Metadata } |
  { 'err' : CommonError };
export type Result_12 = { 'ok' : boolean } |
  { 'err' : CommonError };
export type Result_8 = {
    'ok' : Array<[TokenIndex, [] | [Listing__1], [] | [Array<number>]]>
  } |
  { 'err' : CommonError };
export type Result_9 = { 'ok' : Array<TokenIndex> } |
  { 'err' : CommonError };
export type Result__1 = { 'ok' : Metadata } |
  { 'err' : CommonError };
export type Result__1_1 = { 'ok' : AccountIdentifier__3 } |
  { 'err' : CommonError };
export type Result__1_2 = { 'ok' : Balance__1 } |
  { 'err' : CommonError };
export type SubAccount = Array<number>;
export type Time = bigint;
export type Time__1 = bigint;
export type TokenIdentifier__5 = string;
export type TokenIdentifier__6 = string;
export type TokenIndex = number;
export interface TransferRequest {
  'to' : User__3,
  'token' : TokenIdentifier__5,
  'notify' : boolean,
  'from' : User__3,
  'memo' : Memo,
  'subaccount' : [] | [SubAccount],
  'amount' : Balance,
};
export type TransferResponse = { 'ok' : Balance } |
  {
    'err' : { 'CannotNotify' : AccountIdentifier } |
      { 'InsufficientBalance' : null } |
      { 'InvalidToken' : TokenIdentifier__5 } |
      { 'Rejected' : null } |
      { 'Unauthorized' : AccountIdentifier } |
      { 'Other' : string }
  };
export type User__3 = { 'principal' : Principal } |
  { 'address' : AccountIdentifier };
export default interface _SERVICE {
  'acceptCycles' : () => Promise<undefined>,
  'addMetadataStorageType' : (arg_0: string) => Promise<undefined>,
  'addMetadataUrlMany' : (
      arg_0: Array<[MetadataStorageType, TokenIndex, MetadataStorageInfo]>,
    ) => Promise<undefined>,
  'allowance' : (arg_0: AllowanceRequest) => Promise<Result__1_2>,
  'approve' : (arg_0: ApproveRequest) => Promise<boolean>,
  'approveAll' : (arg_0: Array<ApproveRequest>) => Promise<Array<TokenIndex>>,
  'availableCycles' : () => Promise<bigint>,
  'balance' : (arg_0: BalanceRequest) => Promise<BalanceResponse>,
  'batchMintNFT' : (arg_0: Array<MintRequest>) => Promise<Array<TokenIndex>>,
  'batchTransfer' : (arg_0: Array<TransferRequest>) => Promise<
      Array<TransferResponse>
    >,
  'bearer' : (arg_0: TokenIdentifier__6) => Promise<Result__1_1>,
  'deleteMetadataStorageType' : (arg_0: string) => Promise<undefined>,
  'extensions' : () => Promise<Array<Extension>>,
  'getAllowances' : () => Promise<Array<[TokenIndex, Principal]>>,
  'getIsOpen' : (arg_0: TokenIdentifier__6) => Promise<Result_12>,
  'getMedataStorageType' : () => Promise<Array<string>>,
  'getMinter' : () => Promise<Principal>,
  'getNFTMetadata' : () => Promise<Array<Metadata>>,
  'getOpenTime' : () => Promise<Time>,
  'getProperties' : () => Promise<Array<[string, Array<[string, bigint]>]>>,
  'getRegistry' : () => Promise<Array<[TokenIndex, AccountIdentifier__3]>>,
  'getRootBucketId' : () => Promise<[] | [string]>,
  'getScore' : () => Promise<Array<[TokenIndex, number]>>,
  'getStorageMetadataUrl' : (
      arg_0: MetadataStorageType,
      arg_1: TokenIndex,
    ) => Promise<[string, string]>,
  'getTokens' : () => Promise<Array<[TokenIndex, Metadata]>>,
  'getTokensByIds' : (arg_0: Array<TokenIndex>) => Promise<
      Array<[TokenIndex, Metadata]>
    >,
  'getTokensByProperties' : (arg_0: Array<[string, Array<string>]>) => Promise<
      Array<[TokenIndex, Metadata]>
    >,
  'getTokenspageable' : (arg_0: TokenIndex, arg_1: TokenIndex) => Promise<
      Array<[TokenIndex, Metadata]>
    >,
  'http_request' : (arg_0: HttpRequest) => Promise<HttpResponse>,
  'initCap' : () => Promise<[] | [string]>,
  'initLastMetadata' : (arg_0: TokenIndex, arg_1: TokenIndex) => Promise<
      undefined
    >,
  'initproperties' : (arg_0: Array<TokenIndex>) => Promise<undefined>,
  'lookProperties' : () => Promise<Array<[Property, Array<TokenIndex>]>>,
  'lookPropertyScoreByTokenId' : () => Promise<
      Array<[TokenIndex, Array<[Property, bigint]>]>
    >,
  'metadata' : (arg_0: TokenIdentifier__6) => Promise<Result__1>,
  'mintNFT' : (arg_0: MintRequest) => Promise<TokenIndex>,
  'open' : (arg_0: TokenIdentifier__6) => Promise<Result_11>,
  'putNFTMetadata' : (arg_0: Array<Metadata>) => Promise<undefined>,
  'replaceMetadata' : (
      arg_0: MetadataStorageType,
      arg_1: TokenIndex,
      arg_2: TokenIndex,
    ) => Promise<undefined>,
  'setMinter' : (arg_0: Principal) => Promise<undefined>,
  'setOpenTime' : (arg_0: Time) => Promise<undefined>,
  'setScoreOfTokenId' : (arg_0: bigint) => Promise<undefined>,
  'supply' : (arg_0: TokenIdentifier__6) => Promise<Result_10>,
  'tokens' : (arg_0: AccountIdentifier__3) => Promise<Result_9>,
  'tokens_ext' : (arg_0: AccountIdentifier__3) => Promise<Result_8>,
  'transfer' : (arg_0: TransferRequest) => Promise<TransferResponse>,
  'updateNFTMetadata' : (arg_0: Array<Metadata>) => Promise<undefined>,
};